""" Functionality for importing PyQT or PySide. 

"""

import os, sys
import logging
logger = logging.getLogger(__name__)

BINDINGS_PYQT = 'pyqt'
BINDINGS_PYSIDE = 'pyside'
VALID_BINDINGS = (BINDINGS_PYQT, BINDINGS_PYSIDE)


def load_selected_qt(bindings):
    """ Loads Qt given the bindings. 
        Valid bindings are: 'PyQt4' or 'PySide'
        Raises ImportError in case the binding are not installed.
    """
    if bindings == BINDINGS_PYQT:
        import sip
        try:
            sip.setapi('QString', 2)
            sip.setapi('QVariant', 2)
        except ValueError as ex:
            raise ValueError("Unable to load PyQt4 ({}). ".format(ex) + 
                "Try setting the QT_API environment variable to 'pyqt'")
            
        # The following APIs are set to 1 by IPython2 regardles of the QT_API environment var.
        # Version 2 therefore cannot be used when using IPython2 GUI integration.
        #sip.setapi('QDate', 2)  
        #sip.setapi('QDateTime', 2)
        #sip.setapi('QTextStream', 2)
        #sip.setapi('QTime', 2)
        #sip.setapi('QUrl', 2)
            
        from PyQt4 import QtCore, QtGui
    elif bindings == BINDINGS_PYSIDE:
        from PySide import QtCore, QtGui
    else:
        raise ValueError("Invalid Qt bindings {!r}. Must be one of: {}"
                         .format(bindings, VALID_BINDINGS))
        
    return QtCore, QtGui, bindings
    
    
def load_qt(bindings=None):
    """ Loads Qt from either the PyQt4 or PySide packages.
        
        The actual bindings are determined in from (in order of precedence):
        1) If the bindings parameter is set (to 'pyqt' or 'pyside') it is ued.
        2) A --use-pyqt or --use-pyside is a command line option (from sys.argv)
        3) If one of the valid binding is already imported, this is used.
        4) If the QT_API environment variable is set, this is used.
        5) Try to import PyQt4, otherwise try to import PySide.
    
        Returns the imported QtCore, QtGui and ACTIVE_BINDINGS as a tuple.
        Raises ImportError in case the bindings are not installed.
    """
    if bindings:
        logger.info("Loading {} (explicitly selected)".format(bindings))
        return load_selected_qt(bindings)
        
    if '--use-pyqt' in sys.argv:
        logger.info("Loading pyqt (--use-pyqt command line option)")
        return load_selected_qt(BINDINGS_PYQT)
    
    if '--use-pyside' in sys.argv:
        logger.info("Loading pyside (--use-pyside command line option)")
        return load_selected_qt(BINDINGS_PYSIDE)
    
    # If one of the valid binding is already imported, use this.
    # If IPython is started with --gui=qt, the bindings will be present in sys.modules as well.
    # To keep it simple we therefore do not use IPython.external.qt_loaders.loaded_api 
    if 'PyQt4' in sys.modules:
        logger.info("Using {} (was already imported)".format(BINDINGS_PYQT))
        return load_selected_qt(BINDINGS_PYQT)
    if 'PySide' in sys.modules:
        logger.info("Using {} (was already imported)".format(BINDINGS_PYSIDE))
        return load_selected_qt(BINDINGS_PYSIDE)
    
    # Is checked after installed module because it would otherwise be difficult
    # to override. Calling load_qt from another program that doesn't check the QT_API 
    # environment variable would give conflicts.
    env_qt_api = os.environ.get('QT_API', None)
    if env_qt_api:
        if env_qt_api in VALID_BINDINGS:
            logger.info("Loading {} (from QT_API environment variable)".format(env_qt_api))
            return load_selected_qt(env_qt_api)
        else:
            logger.warn("Ignored invalid QT_API environment variable: {}".format(env_qt_api))
            
    logger.debug("No Qt bindings runnging or selected. Will try to use PyQt4 first, then PySide.")
    try:
        QtCore, QtGui, active_bindings = load_selected_qt(BINDINGS_PYQT)
        logger.info("Loaded {}".format(BINDINGS_PYQT))
    except ImportError:
        QtCore, QtGui, active_bindings = load_selected_qt(BINDINGS_PYSIDE)
        logger.info("Loaded {}".format(BINDINGS_PYSIDE))
    
    return QtCore, QtGui, active_bindings


